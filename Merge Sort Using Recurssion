var arr1 : [Int] = [20,1,8,5,9,80]

func merge(leftArray:[Int],rightArray:[Int])->[Int] {
    
    var leftIndex = 0
    var rightIndex = 0
    var orderedArray = [Int]()
    
    print(leftArray,"left  Array")
    print(rightArray,"right Array")
    
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        print("i m in")
        let leftElement = leftArray[leftIndex]
        let rightElement = rightArray[rightIndex]
       
        if ( leftElement < rightElement ) {
            orderedArray.append(leftElement)
            leftIndex += 1
        } else if ( rightElement < leftElement ) {
            orderedArray.append(rightElement)
            rightIndex += 1
        } else {
            orderedArray.append(leftElement)
            orderedArray.append(rightElement)
            leftIndex += 1
            rightIndex += 1
        }
         
    }
    
    
    
    
    while leftIndex < leftArray.count {
        print("i m in left")
        orderedArray.append(leftArray[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < rightArray.count {
        print("i m in right")

           orderedArray.append(rightArray[rightIndex])
           rightIndex += 1
    }
    print(orderedArray,"oo")
    return orderedArray
    
}


func mergeSort(arry:[Int])->[Int] {
    print(arry)

    if ( arry.count > 1 ) {
        
        let mid = arry.count / 2
        let leftArray = mergeSort(arry: Array(arry[0..<mid]))
        print("generating left array",leftArray)

        let rightArray = mergeSort(arry: Array(arry[mid..<arry.count]))
        print("generating right array",rightArray)

        let result = merge(leftArray:leftArray,rightArray:rightArray)
        print("i m multiple",result)
        return result

    }
    
    print("i m single")
    return arry
    
    
}


mergeSort(arry:arr1)
