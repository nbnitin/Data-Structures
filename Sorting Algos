using System;
using System.Collections;
using System.Collections.Generic;

public class Program
{
	public static void Main()
	{
		int[] a = {-3,-5,100,85,3,1,90,30,20};
		InsertionSortClass isort = new InsertionSortClass();
		//isort.doSort(a);
		
		BubbleSort bs = new BubbleSort();
		//bs.doSort(a);
		
		SelectionSort ss = new SelectionSort();
		//ss.doSort(a);
		
		MergeSort ms = new MergeSort();
		ms.doSort(a);

	}
}

public class InsertionSortClass
{
	public void doSort(int[] a){
		
		int key = 0;
		int y = 0;
		
		for (int i=0; i < a.Length; i++){
			key = a[i];
			y = i - 1;
			
			while( y >= 0 && a[y] > key){
				a[y + 1] = a[y];
				y = y - 1;
			}
			
			a[y+1] = key;
		}
		
		for(int i = 0 ;i < a.Length; i++){
			Console.WriteLine(a[i]);
		}
	}
}

public class BubbleSort{
	public void doSort(int[] a){
		for (int i=0;i<a.Length;i++){
			for (int j = 0; j< i; j++){
				if (a[i] < a[j]){
					//int temp = a[i];
					a[i] = a[i] + a[j]; //a[j];
					a[j] = a[i] - a[j];//temp;
					//temp = a[i];
					a[i] = a[i] - a[j];
				}
			}
		}
		for(int i = 0 ;i < a.Length; i++){
			Console.WriteLine(a[i]);
		}
	}
}

public class SelectionSort{
	public void doSort(int[] a) {
		for (int i = 0; i< a.Length - 1; i++) {
			int min = i;
			
			for(int j=i+1;j<a.Length;j++){
				if ( a[j]<a[min] ) {
					min = j;
				}
			}
			int temp = a[min];
			a[min] = a[i];
			a[i] = temp;
				
		}
		
		for(int i = 0 ;i < a.Length; i++){
			Console.WriteLine(a[i]);
		}
	}
		
}

public class MergeSort{
	public void doSort(int[] a) {
		Console.Write("Given array");
		for(int i=0;i<a.Length;i++){
			Console.WriteLine(a[i]);
		}
		this.sort(a,0,a.Length-1);
		Console.Write("Sorted array");
		for(int i=0;i<a.Length;i++){
			Console.WriteLine(a[i]);
		}
	}
	
	private void sort(int[] a,int l, int r){
		if ( l < r  ) {
			int m = (l + r) / 2;
			this.sort(a,l,m);
			this.sort(a,m+1,r);
			this.merge(a,l,m,r);
		}
	}
	
	private void merge(int[] arr,int l,int m,int r){
		// Find sizes of two subarrays to be merged 
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        /* Create temp arrays */
        int[] L = new int [n1]; 
        int[] R = new int [n2]; 
  
        /*Copy data to temp arrays*/
        for (int q=0; q<n1; ++q) 
            L[q] = arr[l + q]; 
        for (int w=0; w<n2; ++w) 
            R[w] = arr[m + 1+ w]; 
  
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = l; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
	}
	
	
}
